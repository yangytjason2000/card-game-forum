// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  REGULAR
  ADMIN
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  createdSubforums Subforum[] @relation("CreatedBy")

  username String? @unique
  type UserType @default(REGULAR)
  
  image    String?
  accounts Account[]
  sessions Session[]
  posts Post[]
  comments Comment[]
  commentVotes CommentVote[]
  votes Vote[]
  subscriptions Subscription[]
}

model Subforum {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]

  creatorId String? @db.ObjectId
  Creator User? @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId 
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  subforum Subforum @relation(fields: [subforumId], references: [id])
  subforumId String @db.ObjectId

  @@unique([userId, subforumId])
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subforum Subforum @relation(fields: [subforumId], references: [id])
  subforumId String @db.ObjectId

  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  comments Comment[]
  votes Vote[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  createdAt DateTime @default(now())
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id])
  postId String @db.ObjectId

  replyToId String? @db.ObjectId
  replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("ReplyTo")

  votes CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  type VoteType

  @@unique([userId, postId])

}
model CommentVote {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  comment Comment @relation(fields: [commentId], references: [id])
  commentId String @db.ObjectId
  type VoteType

  @@unique([userId, commentId])
}
